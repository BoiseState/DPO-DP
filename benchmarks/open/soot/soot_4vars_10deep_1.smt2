;symbolic execution tree
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(push)
(assert (le x3 java.lang.Object))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.List)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.MethodSource))
(check-sat)
(push)
(assert (le x1 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.MethodSource)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.MethodSource)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.MethodSource)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.method_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.method_info)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.method_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(push)
(assert (not (le x0 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.RefType))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 soot.util.HashChain))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.util.HashChain)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.HashChain))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.util.HashChain)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.method_info))
(check-sat)
(push)
(assert (le x1 soot.coffi.method_info))
(check-sat)
(push)
(assert (le x1 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.method_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.method_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.method_info)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.method_info))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.method_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 soot.MethodSource))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.MethodSource)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.MethodSource)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.MethodSource)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.MethodSource)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.Integer))
(check-sat)
(push)
(assert (= x1 java.lang.Integer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.Integer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.Integer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.Integer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.Integer)))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x1 java.lang.Integer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.Integer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.Integer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.Integer)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.method_info)))
(check-sat)
(push)
(assert (le x2 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.method_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.toolkits.graph.PseudoTopologicalOrderer))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.toolkits.graph.PseudoTopologicalOrderer)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.RefType))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (not (le x0 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.RefType))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.Numberable))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.util.Numberable)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.RefType))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (le x0 soot.util.Numberable))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.util.Numberable)))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.util.Numberable))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.util.Numberable)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(push)
(assert (= x0 soot.util.NumberedString))
(check-sat)
(pop)
(push)
(assert (not (= x0 soot.util.NumberedString)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.util.Numberable))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 soot.util.Numberable))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.util.Numberable)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.Numberable))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.util.Numberable)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.util.Numberable)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.toolkits.scalar.ArraySparseSet))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.toolkits.scalar.ArraySparseSet)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (not (le x0 soot.RefType)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.RefType))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.SootField))
(check-sat)
(push)
(assert (le x0 soot.SootField))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.SootField)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.SootField)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.method_info))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.method_info)))
(check-sat)
(push)
(assert (le x0 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.method_info)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.method_info)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.method_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x2 soot.Transform))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.Transform)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.util.Map_currencysign_Entry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.Map_currencysign_Entry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x0 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x0 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.Exception_attribute)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.Exception_attribute))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x0 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x2 soot.coffi.method_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.method_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_InterfaceMethodref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_InterfaceMethodref_info))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_InterfaceMethodref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_InterfaceMethodref_info))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 soot.coffi.Code_attribute))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.Code_attribute)))
(check-sat)
(push)
(assert (le x0 soot.coffi.Code_attribute))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.Code_attribute)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.Type))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.Type)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(push)
(assert (le x1 soot.toolkits.scalar.FlowSet))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 soot.toolkits.scalar.FlowSet)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 soot.Transform))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.Transform)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 soot.Transform))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.Transform)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.RefType))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.SourceLocator_currencysign_FoundFile))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.SourceLocator_currencysign_FoundFile)))
(check-sat)
(push)
(assert (le x0 soot.SourceLocator_currencysign_FoundFile))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.SourceLocator_currencysign_FoundFile)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.SourceLocator_currencysign_FoundFile))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.SourceLocator_currencysign_FoundFile)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.Type))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.Type)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.coffi.Code_attribute))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.Code_attribute))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.Code_attribute)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.Exception_attribute)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.coffi.Exception_attribute))
(check-sat)
(push)
(assert (not (le x0 soot.coffi.Synthetic_attribute)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.Synthetic_attribute))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.Synthetic_attribute)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.Synthetic_attribute))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.Code_attribute)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Class_info))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Class_info))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.Code_attribute))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.Code_attribute)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_NameAndType_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_NameAndType_info)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 soot.Type))
(check-sat)
(push)
(assert (le x0 soot.Type))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.Type)))
(check-sat)
(push)
(assert (le x0 soot.Type))
(check-sat)
(push)
(assert (le x0 soot.Type))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.Type)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.Type)))
(check-sat)
(push)
(assert (le x0 soot.Type))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.Type)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 soot.Type)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 soot.coffi.Code_attribute))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.Code_attribute)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.Transformer))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.Transformer)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.Transformer))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.Transformer)))
(check-sat)
(push)
(assert (le x1 soot.Transformer))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.Transformer)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.Collection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.Collection)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x2 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.Collection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.Collection)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x2 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x2 soot.coffi.Code_attribute))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.Code_attribute)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_InterfaceMethodref_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_InterfaceMethodref_info))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Methodref_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Methodref_info))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Fieldref_info)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Fieldref_info))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x0 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x1 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.MethodSource)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.ClassFile))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.ClassFile)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.ClassFile))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.ClassFile)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(push)
(assert (le x0 soot.jimple.internal.JimpleLocal))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.jimple.internal.JimpleLocal)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.SootClass))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.SootClass)))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.RefType)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.RefType))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.Exception_attribute))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.Exception_attribute)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.coffi.CONSTANT_Class_info))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x0 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuffer))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuffer)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x0 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 soot.coffi.Exception_attribute)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.Exception_attribute))
(check-sat)
(push)
(assert (not (le x1 soot.coffi.Synthetic_attribute)))
(check-sat)
(pop)
(push)
(assert (le x1 soot.coffi.Synthetic_attribute))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x1 soot.coffi.Code_attribute))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.Code_attribute)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x0 soot.MethodSource))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 soot.MethodSource)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.coffi.Code_attribute))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.Code_attribute)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.DataInputStream))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.DataInputStream)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.CONSTANT_Class_info))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x2 soot.coffi.CONSTANT_Class_info)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (le x1 soot.coffi.CONSTANT_Utf8_info))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.coffi.CONSTANT_Utf8_info)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x1 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 soot.util.HashChain_currencysign_Link))
(check-sat)
(pop)
(push)
(assert (not (le x1 soot.util.HashChain_currencysign_Link)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (le x1 java.util.List))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.List))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.List)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (le x3 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x3 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StringBuilder))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.StringBuilder)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (le x1 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x0 java.lang.String)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
