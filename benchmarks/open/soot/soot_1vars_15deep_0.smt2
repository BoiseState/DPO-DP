;symbolic execution tree
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(push)
(assert (le x0 soot.jimple.spark.ondemand.genericutil.ArraySet))
(check-sat)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (le x0 soot.jimple.toolkits.pointer.MemoryEfficientRasUnion))
(check-sat)
(pop)
(push)
(assert (le x0 soot.toolkits.scalar.AbstractFlowSet))
(check-sat)
(push)
(assert (not (le x0 soot.toolkits.scalar.ArraySparseSet)))
(check-sat)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (le x0 soot.jimple.spark.ondemand.genericutil.ArraySet))
(check-sat)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (le x0 soot.jimple.toolkits.pointer.MemoryEfficientRasUnion))
(check-sat)
(pop)
(push)
(assert (le x0 soot.toolkits.scalar.AbstractFlowSet))
(check-sat)
(push)
(assert (not (le x0 soot.toolkits.scalar.ArraySparseSet)))
(check-sat)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(push)
(assert (le x0 soot.jimple.toolkits.pointer.MemoryEfficientRasUnion))
(check-sat)
(pop)
(push)
(assert (le x0 soot.toolkits.scalar.AbstractFlowSet))
(check-sat)
(push)
(assert (not (le x0 soot.toolkits.scalar.ArraySparseSet)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.Hashtable)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.spark.ondemand.genericutil.ImmutableStack))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.Vector))
(check-sat)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(push)
(assert (le x0 soot.util.HashChain))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.parser.node.TypedLinkedList))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.shimple.internal.SPatchingChain)))
(check-sat)
(push)
(assert (le x0 soot.PatchingChain))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (not (le x0 soot.jimple.parser.node.TypedLinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.shimple.internal.SPatchingChain))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.HashSet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.Hashtable))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.UnitMap))
(check-sat)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x0 soot.coffi.BBQ))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.ArrayList))
(check-sat)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.jimple.spark.ondemand.genericutil.ArraySet))
(check-sat)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.HashMap)))
(check-sat)
(push)
(assert (le x0 java.util.AbstractMap))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.jimple.spark.ondemand.WrappedPointsToSet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.TreeSet))
(check-sat)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.jimple.toolkits.typing.fast.QueuedSet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.HashMap))
(check-sat)
(pop)
(push)
(assert (= x0 soot.jimple.spark.ondemand.genericutil.Stack))
(check-sat)
(pop)
(push)
(assert (le x0 soot.toolkits.scalar.ArraySparseSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.spark.sets.PointsToSetEqualsWrapper))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.HashMultiMap))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.BitSet))
(check-sat)
(pop)
(push)
(assert (le x0 polyglot.util.TypedList))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.Hashtable)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.spark.ondemand.genericutil.ImmutableStack))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.Vector))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (le x0 soot.util.HashChain))
(check-sat)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (le x0 soot.jimple.spark.ondemand.genericutil.ArraySet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(push)
(assert (not (le x0 soot.PatchingChain)))
(check-sat)
(push)
(assert (not (le x0 java.util.AbstractList)))
(check-sat)
(push)
(assert (not (le x0 soot.util.HashChain)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 soot.shimple.internal.SPatchingChain)))
(check-sat)
(push)
(assert (le x0 soot.PatchingChain))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (not (le x0 soot.jimple.parser.node.TypedLinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.Vector))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.TreeSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.shimple.internal.SPatchingChain))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.IdentityHashSet))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.ArrayList)))
(check-sat)
(push)
(assert (le x0 java.util.AbstractList))
(check-sat)
(push)
(assert (not (le x0 java.util.Vector)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 soot.jimple.parser.node.TypedLinkedList))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.HashSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.IterableSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.HashChain))
(check-sat)
(push)
(assert (not (le x0 soot.util.IterableSet)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.util.ArraySet))
(check-sat)
(pop)
(push)
(assert (le x0 polyglot.util.TypedList))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.ArrayList))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.LinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.jimple.parser.node.TypedLinkedList))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.shimple.internal.SPatchingChain)))
(check-sat)
(push)
(assert (le x0 soot.PatchingChain))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (not (le x0 soot.jimple.parser.node.TypedLinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.shimple.internal.SPatchingChain))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.LinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.HashSet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.Hashtable))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.UnitMap))
(check-sat)
(pop)
(push)
(assert (= x0 soot.coffi.BBQ))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.ArrayList))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.spark.ondemand.genericutil.ArraySet))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.HashMap)))
(check-sat)
(push)
(assert (le x0 java.util.AbstractMap))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.jimple.spark.ondemand.WrappedPointsToSet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.TreeSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.toolkits.typing.fast.QueuedSet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.HashMap))
(check-sat)
(pop)
(push)
(assert (= x0 soot.jimple.spark.ondemand.genericutil.Stack))
(check-sat)
(pop)
(push)
(assert (le x0 soot.toolkits.scalar.ArraySparseSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.spark.sets.PointsToSetEqualsWrapper))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.HashMultiMap))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.BitSet))
(check-sat)
(pop)
(push)
(assert (le x0 polyglot.util.TypedList))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.LinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(push)
(assert (not (le x0 soot.PatchingChain)))
(check-sat)
(push)
(assert (not (le x0 java.util.AbstractList)))
(check-sat)
(push)
(assert (not (le x0 soot.util.HashChain)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 soot.shimple.internal.SPatchingChain)))
(check-sat)
(push)
(assert (le x0 soot.PatchingChain))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (not (le x0 soot.jimple.parser.node.TypedLinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.Vector))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.TreeSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.shimple.internal.SPatchingChain))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.IdentityHashSet))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.ArrayList)))
(check-sat)
(push)
(assert (le x0 java.util.AbstractList))
(check-sat)
(push)
(assert (not (le x0 java.util.Vector)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 soot.jimple.parser.node.TypedLinkedList))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.HashSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.IterableSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.HashChain))
(check-sat)
(push)
(assert (not (le x0 soot.util.IterableSet)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.util.ArraySet))
(check-sat)
(pop)
(push)
(assert (le x0 polyglot.util.TypedList))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.ArrayList))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.LinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.AbstractCollection)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.Hashtable)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.spark.ondemand.genericutil.ImmutableStack))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.Vector))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.HashSet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.Hashtable))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.UnitMap))
(check-sat)
(pop)
(push)
(assert (= x0 soot.coffi.BBQ))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.ArrayList))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.spark.ondemand.genericutil.ArraySet))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.HashMap)))
(check-sat)
(push)
(assert (le x0 java.util.AbstractMap))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.jimple.spark.ondemand.WrappedPointsToSet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.TreeSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.toolkits.typing.fast.QueuedSet))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.HashMap))
(check-sat)
(pop)
(push)
(assert (= x0 soot.jimple.spark.ondemand.genericutil.Stack))
(check-sat)
(pop)
(push)
(assert (le x0 soot.toolkits.scalar.ArraySparseSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.spark.sets.PointsToSetEqualsWrapper))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.HashMultiMap))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.BitSet))
(check-sat)
(pop)
(push)
(assert (le x0 polyglot.util.TypedList))
(check-sat)
(pop)
(push)
(assert (= x0 java.lang.String))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 java.util.LinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.AbstractCollection))
(check-sat)
(push)
(assert (not (le x0 soot.PatchingChain)))
(check-sat)
(push)
(assert (not (le x0 java.util.AbstractList)))
(check-sat)
(push)
(assert (not (le x0 soot.util.HashChain)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (not (le x0 soot.shimple.internal.SPatchingChain)))
(check-sat)
(push)
(assert (le x0 soot.PatchingChain))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.LinkedList))
(check-sat)
(push)
(assert (not (le x0 soot.jimple.parser.node.TypedLinkedList)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 java.util.Vector))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.TreeSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.shimple.internal.SPatchingChain))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.IdentityHashSet))
(check-sat)
(pop)
(push)
(assert (not (le x0 java.util.ArrayList)))
(check-sat)
(push)
(assert (le x0 java.util.AbstractList))
(check-sat)
(push)
(assert (not (le x0 java.util.Vector)))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (le x0 soot.jimple.parser.node.TypedLinkedList))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.HashSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.IterableSet))
(check-sat)
(pop)
(push)
(assert (le x0 soot.util.HashChain))
(check-sat)
(push)
(assert (not (le x0 soot.util.IterableSet)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.util.ArraySet))
(check-sat)
(pop)
(push)
(assert (le x0 polyglot.util.TypedList))
(check-sat)
(pop)
(push)
(assert (le x0 java.util.ArrayList))
(check-sat)
(pop)
