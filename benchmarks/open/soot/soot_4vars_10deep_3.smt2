;symbolic execution tree
(push)
(assert (le x0 java.lang.Object))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(push)
(assert (le x3 java.lang.Object))
(check-sat)
(push)
(assert (le x0 soot.tagkit.Tag))
(check-sat)
(push)
(assert (le x3 java.io.File))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (le x1 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x3 java.io.File)))
(check-sat)
(pop)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (not (le x0 soot.tagkit.InnerClassTag)))
(check-sat)
(push)
(assert (= x3 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(push)
(assert (= x3 java.lang.String))
(check-sat)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.tagkit.InnerClassTag)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.tagkit.InnerClassTag))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x3 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(push)
(assert (not (le x2 soot.RefType)))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(push)
(assert (= x3 java.lang.String))
(check-sat)
(push)
(assert (= x3 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x3 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x3 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.tagkit.InnerClassTag)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.tagkit.InnerClassTag))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.spark.sets.SharedListSet_currencysign_Pair))
(check-sat)
(pop)
(push)
(assert (le x2 soot.UnknownType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.RefType))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.Long))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.BitSet))
(check-sat)
(pop)
(push)
(assert (le x2 soot.LongType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.MethodLocal))
(check-sat)
(pop)
(push)
(assert (= x2 soot.util.Cons))
(check-sat)
(pop)
(push)
(assert (le x2 soot.ArrayType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.IdentityHashSet))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.Float))
(check-sat)
(pop)
(push)
(assert (le x2 soot.IntType))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.visit.InitChecker_currencysign_MinMaxInitCount))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.Integer))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.util.IdentityKey))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.AbstractMap))
(check-sat)
(pop)
(push)
(assert (le x2 soot.toolkits.graph.ExceptionalUnitGraph_currencysign_1CFGEdge))
(check-sat)
(pop)
(push)
(assert (le x2 soot.DoubleType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.logic.Loop))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.Double))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.reflect.Field))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.frontend.Source))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.internal.JimpleLocal))
(check-sat)
(pop)
(push)
(assert (le x2 java.security.Permission))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.ClassConstant))
(check-sat)
(pop)
(push)
(assert (= x2 java.text.StringCharacterIterator))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.Character))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.Date))
(check-sat)
(pop)
(push)
(assert (le x2 java.io.File))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.infoflow.CallLocalityContext))
(check-sat)
(pop)
(push)
(assert (le x2 soot.toolkits.scalar.LocalUnitPair))
(check-sat)
(pop)
(push)
(assert (le x2 soot.toolkits.scalar.ValueUnitPair))
(check-sat)
(pop)
(push)
(assert (le x2 soot.shimple.toolkits.graph.ValueGraph_currencysign_TypeValueWrapper))
(check-sat)
(pop)
(push)
(assert (le x2 soot.toolkits.scalar.StringGroupPair))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.FlowGraphEdge))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.MethodParameter))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.NullConstant))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.purity.PurityStmtNode))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.purity.PurityGlobalNode))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.visit.InitChecker_currencysign_InitCount))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.util.Vector)))
(check-sat)
(push)
(assert (le x2 java.util.AbstractList))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.FloatType))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.util.Enum))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.purity.PurityMethodNode))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.Boolean))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.pointer.representations.GeneralConstObject))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.StackTraceElement))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.FloatConstant))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.thread.synchronization.NewStaticLock))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.GroupIntPair))
(check-sat)
(pop)
(push)
(assert (le x2 soot.baf.DoubleWordType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.toolkits.graph.DGEdge))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.HashMultiMap))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.spark.pag.Node))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.purity.PurityEdge))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.Hashtable))
(check-sat)
(pop)
(push)
(assert (le x2 soot.toolkits.scalar.Pair))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.UnitMap))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.String))
(check-sat)
(pop)
(push)
(assert (le x2 soot.BooleanType))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.util.TypedList))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.Array2ndDimensionSymbol))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.purity.PurityParamNode))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.visit.DataFlow_currencysign_Item))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x2 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (= x2 java.lang.Byte))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedEdge))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.typing.TypeVariable))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.typing.integer.TypeVariable))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.pointer.DependenceGraph_currencysign_Edge))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.types.Flags))
(check-sat)
(pop)
(push)
(assert (le x2 soot.VoidType))
(check-sat)
(pop)
(push)
(assert (le x2 java.math.BigInteger))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.Vector))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.thread.synchronization.LocksetFlowInfo))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.spark.ondemand.AllocAndContext))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.spark.ondemand.DemandCSPointsTo_currencysign_VarAndContext))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.MethodReturn))
(check-sat)
(pop)
(push)
(assert (le x2 java.text.NumberFormat))
(check-sat)
(push)
(assert (not (le x0 soot.tagkit.InnerClassTag)))
(check-sat)
(pop)
(push)
(assert (le x0 soot.tagkit.InnerClassTag))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.jimple.spark.sets.PointsToSetEqualsWrapper))
(check-sat)
(pop)
(push)
(assert (le x2 soot.toolkits.scalar.AbstractFlowSet))
(check-sat)
(push)
(assert (= x1 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (not (le x0 soot.tagkit.InnerClassTag)))
(check-sat)
(push)
(assert (le x1 java.lang.Object))
(check-sat)
(pop)
(push)
(assert (not (le x1 java.lang.Object)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.tagkit.InnerClassTag))
(check-sat)
(pop)
(push)
(assert (= x3 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x3 java.lang.String)))
(check-sat)
(pop)
(push)
(assert (= x3 java.lang.String))
(check-sat)
(pop)
(push)
(assert (not (= x3 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.baf.WordType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.purity.PurityGraphBox))
(check-sat)
(pop)
(push)
(assert (le x2 soot.toolkits.scalar.UnitValueBoxPair))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.StringConstant))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.util.MaxLevels))
(check-sat)
(pop)
(push)
(assert (le x2 java.lang.Enum))
(check-sat)
(pop)
(push)
(assert (le x2 java.util.zip.ZipEntry))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.jimple.toolkits.pointer.DependenceGraph_currencysign_Edge)))
(check-sat)
(push)
(assert (not (le x2 polyglot.visit.InitChecker_currencysign_MinMaxInitCount)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.typing.integer.TypeVariable)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.typing.TypeVariable)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.WeightedDirectedEdge)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.MethodLocal)))
(check-sat)
(push)
(assert (not (= x2 soot.util.Cons)))
(check-sat)
(push)
(assert (not (le x2 polyglot.visit.DataFlow_currencysign_Item)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.purity.PurityParamNode)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.Array2ndDimensionSymbol)))
(check-sat)
(push)
(assert (not (le x2 java.util.BitSet)))
(check-sat)
(push)
(assert (not (le x2 polyglot.util.TypedList)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.spark.sets.SharedListSet_currencysign_Pair)))
(check-sat)
(push)
(assert (not (= x2 java.text.StringCharacterIterator)))
(check-sat)
(push)
(assert (not (le x2 polyglot.util.Enum_currencysign_EnumKey)))
(check-sat)
(push)
(assert (not (le x2 java.util.zip.ZipEntry)))
(check-sat)
(push)
(assert (not (le x2 java.lang.Enum)))
(check-sat)
(push)
(assert (not (le x2 polyglot.util.MaxLevels)))
(check-sat)
(push)
(assert (not (le x2 soot.toolkits.scalar.UnitValueBoxPair)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.purity.PurityGraphBox)))
(check-sat)
(push)
(assert (not (le x2 soot.toolkits.scalar.AbstractFlowSet)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.spark.sets.PointsToSetEqualsWrapper)))
(check-sat)
(push)
(assert (not (le x2 java.security.Permission)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.internal.JimpleLocal)))
(check-sat)
(push)
(assert (not (le x2 polyglot.frontend.Source)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.MethodReturn)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.spark.ondemand.DemandCSPointsTo_currencysign_VarAndContext)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.spark.ondemand.AllocAndContext)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.logic.Loop)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.thread.synchronization.LocksetFlowInfo)))
(check-sat)
(push)
(assert (not (le x2 soot.toolkits.graph.ExceptionalUnitGraph_currencysign_1CFGEdge)))
(check-sat)
(push)
(assert (le x2 java.lang.Object))
(check-sat)
(push)
(assert (not (le x2 java.util.AbstractMap)))
(check-sat)
(push)
(assert (not (le x2 polyglot.util.IdentityKey)))
(check-sat)
(push)
(assert (not (le x2 polyglot.types.Flags)))
(check-sat)
(push)
(assert (not (le x2 polyglot.util.Enum)))
(check-sat)
(push)
(assert (not (= x2 soot.MethodContext)))
(check-sat)
(push)
(assert (not (le x2 polyglot.visit.InitChecker_currencysign_InitCount)))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.Instruction)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.purity.PurityGlobalNode)))
(check-sat)
(push)
(assert (not (= x2 soot.jimple.toolkits.callgraph.Edge)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.purity.PurityStmtNode)))
(check-sat)
(push)
(assert (not (le x2 soot.util.BitVector)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.MethodParameter)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.FlowGraphEdge)))
(check-sat)
(push)
(assert (not (le x2 soot.toolkits.scalar.StringGroupPair)))
(check-sat)
(push)
(assert (not (le x2 polyglot.ext.jl.types.TypeObject_c)))
(check-sat)
(push)
(assert (not (le x2 soot.shimple.toolkits.graph.ValueGraph_currencysign_TypeValueWrapper)))
(check-sat)
(push)
(assert (not (le x2 soot.toolkits.scalar.LocalUnitPair)))
(check-sat)
(push)
(assert (not (le x2 soot.EquivalentValue)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.BoolValue)))
(check-sat)
(push)
(assert (not (le x2 polyglot.visit.FlowGraph_currencysign_ListKey)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.infoflow.CallLocalityContext)))
(check-sat)
(push)
(assert (not (le x2 java.io.File)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.spark.ondemand.genericutil.ImmutableStack)))
(check-sat)
(push)
(assert (not (le x2 java.util.Date)))
(check-sat)
(push)
(assert (not (= x2 java.lang.Character)))
(check-sat)
(push)
(assert (not (= x2 java.lang.String)))
(check-sat)
(push)
(assert (not (le x2 soot.util.UnitMap)))
(check-sat)
(push)
(assert (not (le x2 soot.toolkits.scalar.Pair)))
(check-sat)
(push)
(assert (not (le x2 polyglot.visit.FlowGraph_currencysign_EdgeKey)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.purity.PurityEdge)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.spark.pag.Node)))
(check-sat)
(push)
(assert (not (le x2 soot.util.HashMultiMap)))
(check-sat)
(push)
(assert (not (le x2 soot.coffi.BasicBlock)))
(check-sat)
(push)
(assert (not (le x2 soot.toolkits.exceptions.ThrowableSet_currencysign_Pair)))
(check-sat)
(push)
(assert (not (le x2 soot.toolkits.graph.DGEdge)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.IntContainer)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.thread.synchronization.NewStaticLock)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.spark.ondemand.WrappedPointsToSet)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.GroupIntPair)))
(check-sat)
(push)
(assert (not (le x2 polyglot.types.reflect.Constant)))
(check-sat)
(push)
(assert (not (= x2 java.lang.StackTraceElement)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.purity.PurityGraph)))
(check-sat)
(push)
(assert (not (= x2 java.lang.Boolean)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.arraycheck.ArrayReferenceNode)))
(check-sat)
(push)
(assert (not (le x2 soot.jimple.toolkits.annotation.purity.PurityMethodNode)))
(check-sat)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(pop)
(push)
(assert (le x2 polyglot.util.Enum_currencysign_EnumKey))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.IntConstant))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.LongConstant))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.spark.ondemand.genericutil.ImmutableStack))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.visit.FlowGraph_currencysign_ListKey))
(check-sat)
(pop)
(push)
(assert (le x2 soot.StmtAddressType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.BoolValue))
(check-sat)
(pop)
(push)
(assert (le x2 soot.EquivalentValue))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.ext.jl.types.TypeObject_c))
(check-sat)
(pop)
(push)
(assert (le x2 soot.ByteType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.util.BitVector))
(check-sat)
(pop)
(push)
(assert (= x2 soot.jimple.toolkits.callgraph.Edge))
(check-sat)
(pop)
(push)
(assert (= x2 java.lang.Short))
(check-sat)
(pop)
(push)
(assert (le x2 soot.ShortType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.Instruction))
(check-sat)
(pop)
(push)
(assert (= x2 soot.MethodContext))
(check-sat)
(pop)
(push)
(assert (le x2 soot.ErroneousType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.purity.PurityGraph))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.ArrayReferenceNode))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.BoundedPriorityList))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.pointer.MemoryEfficientRasUnion))
(check-sat)
(pop)
(push)
(assert (le x2 soot.NullType))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.types.reflect.Constant))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.spark.ondemand.WrappedPointsToSet))
(check-sat)
(pop)
(push)
(assert (le x2 soot.jimple.toolkits.annotation.arraycheck.IntContainer))
(check-sat)
(pop)
(push)
(assert (not (le x2 soot.util.IdentityHashSet)))
(check-sat)
(push)
(assert (le x2 java.util.AbstractSet))
(check-sat)
(pop)
(pop)
(push)
(assert (le x2 soot.jimple.DoubleConstant))
(check-sat)
(pop)
(push)
(assert (le x2 soot.CharType))
(check-sat)
(pop)
(push)
(assert (le x2 soot.toolkits.exceptions.ThrowableSet_currencysign_Pair))
(check-sat)
(pop)
(push)
(assert (le x2 soot.coffi.BasicBlock))
(check-sat)
(pop)
(push)
(assert (le x2 polyglot.visit.FlowGraph_currencysign_EdgeKey))
(check-sat)
(pop)
(pop)
(pop)
(push)
(assert (not (= x3 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (le x0 soot.tagkit.InnerClassTag))
(check-sat)
(pop)
(pop)
(push)
(assert (not (= x1 java.lang.String)))
(check-sat)
(pop)
(pop)
(push)
(assert (not (le x0 soot.tagkit.Tag)))
(check-sat)
(pop)
